From f26d7bb8b9a35cc312d7bc5e008810738daa6041 Mon Sep 17 00:00:00 2001
From: GH Cao <driver1998@foxmail.com>
Date: Sat, 4 Apr 2020 20:12:22 +0800
Subject: [PATCH 3/3] allow new dynarec can be built for Windows ARM

---
 src/cpu_new/codegen_allocator.c        | 2 +-
 src/cpu_new/codegen_allocator.h        | 2 +-
 src/cpu_new/codegen_backend.h          | 2 +-
 src/cpu_new/codegen_backend_arm.c      | 2 +-
 src/cpu_new/codegen_backend_arm_ops.c  | 2 +-
 src/cpu_new/codegen_backend_arm_uops.c | 2 +-
 src/win/Makefile_ndr.mingw             | 5 +++++
 7 files changed, 11 insertions(+), 6 deletions(-)

diff --git a/src/cpu_new/codegen_allocator.c b/src/cpu_new/codegen_allocator.c
index e51cdd59..9f46a835 100644
--- a/src/cpu_new/codegen_allocator.c
+++ b/src/cpu_new/codegen_allocator.c
@@ -112,7 +112,7 @@ uint8_t *codeblock_allocator_get_ptr(mem_block_t *block)
 
 void codegen_allocator_clean_blocks(struct mem_block_t *block)
 {
-#if defined __ARM_EABI__ || defined __aarch64__
+#if defined __ARM_EABI__ || defined _ARM_ || defined __aarch64__
         while (1)
         {
 		__clear_cache(&mem_block_alloc[block->offset], &mem_block_alloc[block->offset + MEM_BLOCK_SIZE]);
diff --git a/src/cpu_new/codegen_allocator.h b/src/cpu_new/codegen_allocator.h
index 90fa1c0b..3b57de16 100644
--- a/src/cpu_new/codegen_allocator.h
+++ b/src/cpu_new/codegen_allocator.h
@@ -13,7 +13,7 @@
   Due to the chaining, the total memory size is limited by the range of a jump
   instruction. ARMv7 is restricted to +/- 32 MB, ARMv8 to +/- 128 MB, x86 to
   +/- 2GB. As a result, total memory size is limited to 32 MB on ARMv7*/
-#ifdef __ARM_EABI__
+#if defined __ARM_EABI__ || _ARM_
 #define MEM_BLOCK_NR 32768
 #else
 #define MEM_BLOCK_NR 131072
diff --git a/src/cpu_new/codegen_backend.h b/src/cpu_new/codegen_backend.h
index acbdab83..391f380b 100644
--- a/src/cpu_new/codegen_backend.h
+++ b/src/cpu_new/codegen_backend.h
@@ -5,7 +5,7 @@
 #include "codegen_backend_x86-64.h"
 #elif defined i386 || defined __i386 || defined __i386__ || defined _X86_ || defined _M_IX86
 #include "codegen_backend_x86.h"
-#elif defined __ARM_EABI__
+#if defined __ARM_EABI__ || defined _ARM_
 #include "codegen_backend_arm.h"
 #elif defined __aarch64__
 #include "codegen_backend_arm64.h"
diff --git a/src/cpu_new/codegen_backend_arm.c b/src/cpu_new/codegen_backend_arm.c
index c422e598..06a06b78 100644
--- a/src/cpu_new/codegen_backend_arm.c
+++ b/src/cpu_new/codegen_backend_arm.c
@@ -1,4 +1,4 @@
-#ifdef __ARM_EABI__
+#if defined __ARM_EABI__ || defined _ARM_
 
 #include <stdint.h>
 #include <stdlib.h>
diff --git a/src/cpu_new/codegen_backend_arm_ops.c b/src/cpu_new/codegen_backend_arm_ops.c
index 90c095ba..65e48cd4 100644
--- a/src/cpu_new/codegen_backend_arm_ops.c
+++ b/src/cpu_new/codegen_backend_arm_ops.c
@@ -1,4 +1,4 @@
-#ifdef __ARM_EABI__
+#if defined __ARM_EABI__ || defined _ARM_
 
 #include <stdint.h>
 #include <86box/86box.h>
diff --git a/src/cpu_new/codegen_backend_arm_uops.c b/src/cpu_new/codegen_backend_arm_uops.c
index 3f16554c..fd17e78d 100644
--- a/src/cpu_new/codegen_backend_arm_uops.c
+++ b/src/cpu_new/codegen_backend_arm_uops.c
@@ -1,4 +1,4 @@
-#ifdef __ARM_EABI__
+#if defined __ARM_EABI__ || defined _ARM_
 
 #include <math.h>
 #include <stdint.h>
diff --git a/src/win/Makefile_ndr.mingw b/src/win/Makefile_ndr.mingw
index f507dc3b..0588e5f7 100644
--- a/src/win/Makefile_ndr.mingw
+++ b/src/win/Makefile_ndr.mingw
@@ -374,6 +374,11 @@ ifeq ($(DYNAREC), y)
 ifeq ($(X64), y)
 PLATCG		:= codegen_backend_x86-64.o codegen_backend_x86-64_ops.o codegen_backend_x86-64_ops_sse.o \
 		   codegen_backend_x86-64_uops.o
+else ifeq ($(ARM64), y)
+PLATCG      := codegen_backend_arm64.o codegen_backend_arm64_ops.o codegen_backend_arm64_uops.o \
+            codegen_backend_arm64_imm.o
+else ifeq ($(ARM), y)
+PLATCG      := codegen_backend_arm.o codegen_backend_arm_ops.o codegen_backend_arm_uops.o
 else
 PLATCG		:= codegen_backend_x86.o codegen_backend_x86_ops.o codegen_backend_x86_ops_fpu.o codegen_backend_x86_ops_sse.o \
 		   codegen_backend_x86_uops.o
-- 
2.17.1

